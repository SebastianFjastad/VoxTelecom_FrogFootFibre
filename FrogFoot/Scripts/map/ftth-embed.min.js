function parsePos(a, b) { function c(a) { var b; a[0].match(/^[NSWE]$/) ? b = a.shift() : a[a.length - 1].match(/^[NSWE]$/) && (b = a.pop()), b = "W" === b || "S" === b ? -1 : 1; for (var c = 0; c < a.length; c++) if (!parseFloat(a[c])) throw "Invalid DMS: " + a.join(" "); switch (a.length) { case 3: return b * (Number(a[0]) + Number(a[1]) / 60 + Number(a[2]) / 3600); case 2: return b * (Number(a[0]) + Number(a[1]) / 60); case 1: return b * a[0]; default: throw "Invalid DMS: " + a.join(" ") } } function d(a) { var b = [-90, 90, -180, 180]; if (void 0 !== a) { if (!a.match(/^[NS][EW]$/)) throw "Invalid Hemisphere: " + a; b["N" == a[0] ? 0 : 1] = 0, b["E" == a[1] ? 2 : 3] = 0 } if (e >= b[0] && e <= b[1] && d >= b[2] && d <= b[3]) var c = d, d = e, e = c; if (d < b[0] || d > b[1]) throw "Invalid Latitude: " + d.toFixed(7); if (e < b[2] || e > b[3]) throw "Invalid Longitude: " + e.toFixed(7) } var e = a.trim().toUpperCase().replace(/[NSWE]/g, " $& ").replace(/[\s,;?°\'’′\"″]+/g, " ").replace(/ +/g, " ").trim().split(" "); if (e.length % 2 || e.length < 2 || e.length > 8) throw "Invalid GPS Coordinates: " + a; var f = c(e.slice(0, e.length / 2)), g = c(e.slice(e.length / 2)); if ("E" == e[0] || "W" == e[0] || "N" == e[e.length - 1] || "S" == e[e.length - 1]) var h = f, f = g, g = h; return d(b), new google.maps.LatLng(f, g) } function ajaxPost(a, b) { var c = window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest; c.onreadystatechange = function () { if (4 == c.readyState && 200 == c.status) { c.onreadystatechange = function () { }; try { b(JSON.parse(c.responseText)) } catch (a) { console.log(a.message) } } }, c.open("POST", "http://maps.frogfoot.net" + a, !0), c.setRequestHeader("X-Requested-With", "XMLHttpRequest"), c.send() } function getPortalZones() { return !!zones.length || $.ajax({ url: "/Home/Home/GetZoneDataForMaps", type: "GET", dataType: "json", success: function (a) { zones = a } }) } function getPortalLocations() { return !!locations.length || $.ajax({ url: "/Home/Home/GetLocationDataForMaps", type: "GET", dataType: "json", success: function (a) { locations = a } }) } function addGeoJson(a, b, c) { ajaxPost(b, function (b) { var d = []; $.each(b.features, function (a, b) { $.inArray(b.properties.title, locations) > -1 && "#000000" !== b.properties.fill && (b.properties = precinct, d.push(b)) }), $.each(b.features, function (a, b) { for (var c = 0; c < zones.length; c++) { var e = zones[c]; if (e.Code === b.properties.title) { switch (e.Status) { case 1: b.properties = $.extend({}, potential); break; case 2: b.properties = $.extend({}, scheduled); break; case 3: b.properties = $.extend({}, workInProgress); break; case 4: b.properties = $.extend({}, completed); break; default: feature.properties = $.extend({}, potential) } $("#useZoneInfoClick").length && (b.properties.zoneId = e.ZoneId), d.push(b) } } }), b.features = d; var e = a.data.addGeoJson(b); void 0 !== c && c(e), a.data.setStyle(function (a) { return { strokeColor: a.getProperty("stroke"), strokeWeight: a.getProperty("stroke-width"), fillColor: a.getProperty("fill"), fillOpacity: a.getProperty("fill-opacity"), icon: a.getProperty("icon"), zIndex: a.getProperty("zIndex") } }) }) } function getServerUrl(a, b, c) { if (void 0 === c) { var d = a.getBounds(), e = d.getNorthEast(), f = d.getSouthWest(); return b + "?bb=" + f.lng() + "," + f.lat() + "," + e.lng() + "," + e.lat() } return b + "?ll=" + c.lat() + "," + c.lng() } function getCoordString(a) { return "(" + a.lat().toFixed(6) + "," + a.lng().toFixed(6) + ")" } function geocodePosition(a, b, c) { var d = new google.maps.Geocoder; d.geocode({ latLng: a }, function (d) { var e = d && d.length > 0 ? d[0].formatted_address : "cannot determine address"; $("#User_Id").length ? ($("#User_Latitude").val(a.lat().toFixed(6)), $("#User_Longitude").val(a.lng().toFixed(6))) : ($("#Latitude").val(a.lat().toFixed(6)), $("#Longitude").val(a.lng().toFixed(6))), b.setTitle(e + "\n" + getCoordString(a)), c.setContent("<b>" + e + "</b><br>" + getCoordString(a)) }) } function removeFeatures(a, b, c) { b.close(), a.data.forEach(function (b) { a.data.remove(b) }), c.forEach(function (a) { a.infowindow.close(), google.maps.event.clearInstanceListeners(a.marker), a.marker.setMap(null) }), c = [] } function displaySurveyResults(a) { var b = "/ftth/check?ll=" + a.lat() + "," + a.lng(), c = document.getElementById("map-results"); ajaxPost(b, function (a) { var b = a.possible, d = b ? "You are located in " + a["precinct-name"] : "Right now, your address is not included in a Frogfoot FTTH precinct, however we do acknowledge areas where interest is high. The more neighbours you can persuade to register interest, the higher the chance that your address could become part of a Frogfoot FTTH precinct!"; c.style.display = "block", c.innerHTML = '<label class="control-label" data-inprecinct="' + b + '">Results:</label><span> ' + d + "</span>" }) } function updateFeatures(a, b, c, d, e) { removeFeatures(a, b, c); var f = new google.maps.LatLngBounds; null != marker && marker.setMap(null), marker = new google.maps.Marker({ map: a, title: e + "\n" + getCoordString(d), position: d, draggable: !0 }); var g = new google.maps.InfoWindow({ content: "<b>" + e + "</b><br>" + getCoordString(d), position: d }); geocodePosition(d, marker, g), f.extend(d), c.push({ marker: marker, infowindow: g }), a.fitBounds(f), displaySurveyResults(d), google.maps.event.addListener(marker, "dragend", function (d) { updateFeatures(a, b, c, marker.getPosition()), $("#User_Id").length ? ($("#User_Latitude").val(d.latLng.lat().toFixed(6)), $("#User_Longitude").val(d.latLng.lng().toFixed(6))) : ($("#Latitude").val(d.latLng.lat().toFixed(6)), $("#Longitude").val(d.latLng.lng().toFixed(6))) }), google.maps.event.addListener(marker, "click", function () { b.close(), g.open(a) }), a.getZoom() > 18 && a.setZoom(18) } function getBoundsFromString(a) { var b = a.split(","), c = new google.maps.LatLng(parseFloat(b[1]), parseFloat(b[0])), d = new google.maps.LatLng(parseFloat(b[3]), parseFloat(b[2])); return new google.maps.LatLngBounds(c, d) } function buildLegend() { var a = "width: 12px;height: 12px;margin-left: 3px;display: inline-block;", b = "margin-left: 5px; padding-top: -3; font-size: 11px;"; return $("#map-canvas").append('<div id="legend" style="height: 90px; width: 120px; background: white;margin-left: 10px;padding-top: 5px; "><div style="' + a + 'background: white; border: solid 1px black;"></div><label style="' + b + '">Potential</label></br><div style="' + a + 'background: DodgerBlue;"></div><label style="' + b + '">Scheduled</label></br><div style="' + a + 'background: Gold;"></div><label style="' + b + '">Work In Progress</label></br><div style="' + a + 'background: Chartreuse;"></div><label style="' + b + '">Completed</label></div>') } var zones = [], locations = [], precinct = { stroke: "white", "stroke-width": 2, fill: null, "fill-opacity": .2, zIndex: 1, title: null, zoneId: null }, potential = { stroke: "white", "stroke-width": 2, fill: null, "fill-opacity": .2, zIndex: 100 }, scheduled = { stroke: "DodgerBlue", "stroke-width": 2, fill: "DodgerBlue", "fill-opacity": .2, zIndex: 100 }, workInProgress = { stroke: "Gold", "stroke-width": 2, fill: "Gold", "fill-opacity": .1, zIndex: 100 }, completed = { stroke: "Chartreuse", "stroke-width": 2, fill: "Chartreuse", "fill-opacity": .2, zIndex: 100 }, marker; $.when(getPortalZones(), getPortalLocations()).done(function () { setTimeout(function () { var a = new google.maps.Map(document.getElementById("map-canvas"), { center: new google.maps.LatLng(-34.035289, 18.44052), zoom: 13, mapTypeId: google.maps.MapTypeId.HYBRID }); buildLegend(), a.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(document.getElementById("legend")); var b = document.getElementById("pac-select"), c = document.getElementById("pac-input"), d = new google.maps.places.SearchBox(c), e = new google.maps.InfoWindow, f = [], g = []; null != b && (b.onchange = function () { var b = g[this.selectedIndex - 1]; null != b && (a.setCenter(b.center), a.fitBounds(getBoundsFromString(b.bounds))) }); var h = $("#Latitude").val(), i = $("#Longitude").val(); if ($("#User_Id").length && (h = $("#User_Latitude").val(), i = $("#User_Longitude").val()), "undefined" != typeof h && "0" !== h && h.length && "undefined" != typeof i && i.length && "0" !== i) { var j = new google.maps.LatLng(h, i); a.setCenter(j), a.setZoom(17), null == marker && (marker = new google.maps.Marker({ map: a, position: j, draggable: !0 })), $("#User_Id").length && google.maps.event.addListener(marker, "dragend", function (a) { $("#User_Latitude").val(a.latLng.lat().toFixed(6)), $("#User_Longitude").val(a.latLng.lng().toFixed(6)) }) } ajaxPost("/ftth/options", function (a) { for (var c in a) { var d = new google.maps.LatLng(a[c].latitude, a[c].longitude); if (g[c] = { name: a[c].name, center: d, bounds: a[c].bounds, id: a[c].id }, null != b) { var e = b.appendChild(document.createElement("option")); e.value = c, e.innerHTML = g[c].name, e.setAttribute("data-id", g[c].id) } } }), google.maps.event.addListener(d, "places_changed", function () { try { updateFeatures(a, e, f, parsePos(c.value, "SE")) } catch (g) { var b = d.getPlaces(); b.length ? updateFeatures(a, e, f, b[0].geometry.location, b[0].name) : alert("Invalid location: " + c.value + ".") } }), google.maps.event.addListener(a, "idle", function () { addGeoJson(a, getServerUrl(a, "/ftth/features"), function (b) { google.maps.event.addListenerOnce(a, "idle", function () { b.forEach(function (b) { a.data.remove(b) }) }) }), $("#useZoneInfoClick").length && a.data.addListener("click", function (a) { var b = $.grep(zones, function (b) { var c = a.feature.getProperty("zoneId"); return b.ZoneId == c }); if (b.length) { var c, d; null != b[0].FirstDateOfFibre && null != b[0].LastDateOfFibre && (c = parseInt(b[0].FirstDateOfFibre.substr(6)), d = parseInt(b[0].LastDateOfFibre.substr(6))), $("#zoneInfoName").text(b[0].Code), $("#zoneInfoStatus").text(b[0].FibreStatusName), null != c && null != d && ($("#zoneInfoFDOF").text(moment(c).format("DD/MM/YYYY")), $("#zoneInfoLDOF").text(moment(d).format("DD/MM/YYYY"))), $("#zoneInfoContainer").show() } else $("#zoneInfoContainer").hide() }), d.setBounds(a.getBounds()) }) }, 20) });